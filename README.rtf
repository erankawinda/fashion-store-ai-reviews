{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww24760\viewh16100\viewkind0
\deftab720
\pard\pardeftab720\sa321\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
# Fashion Store - AI-Powered Clothing Reviews Web Application\
\
## Student Information\
Assignment: Assignment 3 - Milestone II\
\
## Project Overview\
This is an advanced Flask-based online shopping website featuring intelligent search capabilities and AI-powered review recommendations. The application uses Natural Language Processing (NLP) with stemming algorithms for smart search functionality and a machine learning model to predict review recommendations based on both title and description text.\
\
## Project Structure\
   ```\
   project_folder/\
   \uc0\u9500 \u9472 \u9472  app.py              # Main Flask application\
   \uc0\u9500 \u9472 \u9472  templates/\
   \uc0\u9474    \u9492 \u9472 \u9472  index.html       # Frontend HTML template\
   \uc0\u9500 \u9472 \u9472  model.pkl            # Trained machine learning model\
   \uc0\u9500 \u9472 \u9472  vectorizer.pkl       # TF-IDF vectorizer for text processing\
   \uc0\u9500 \u9472 \u9472  assignment3_II.csv.  # Dataset with clothing items and reviews\
   \uc0\u9492 \u9472 \u9472  README.txt.          # This file\
   ```\
\
## Key Features\
\
### 1. Smart Search Algorithm\
- **Automatic Plural/Singular Handling**: Uses Porter Stemmer algorithm to automatically match different word forms (e.g., "dress" matches "dresses", "sweater" matches "sweaters")  \
- **Fuzzy Matching**: Finds items even with slight spelling variations using sequence matching  \
- **Inverted Index**: Efficient search using pre-built index for fast performance  \
- **Relevance Scoring**: Results ranked by category match, title match, and ratings  \
- **Real-time Search Suggestions**: Dropdown shows top results as you type\
\
### 2. Enhanced User Interface\
- **Category Emojis**: Visual indicators for different clothing categories (
\f1 \uc0\u55357 \u56407 
\f0  Dresses, 
\f1 \uc0\u55357 \u56404 
\f0  Shirts, 
\f1 \uc0\u55357 \u56406 
\f0  Pants, etc.)  \
- **Modern Design**: Clean, responsive layout with smooth animations  \
- **Interactive Elements**: Hover effects, loading states, and visual feedback  \
- **Mobile Responsive**: Adapts to different screen sizes\
\
### 3. AI-Powered Review System\
- **Dual Input Analysis**: AI considers both review title AND description for better predictions  \
- **Real-time Prediction**: Shows recommendation as user types  \
- **Confidence Scores**: Displays AI confidence level for transparency  \
- **Override Option**: Users can change AI recommendation if they disagree  \
- **Instant Integration**: New reviews immediately visible and searchable\
\
## Technical Implementation\
\
### Search Algorithm\
The category-based smart search uses:\
1. **Stemming**: Porter Stemmer reduces words to root form (handles plurals automatically)  \
2. **Inverted Index**: Pre-built index maps category word stems to item IDs for O(1) lookup  \
3. **Fuzzy Matching**: 80% similarity threshold for close matches in categories  \
4. **Relevance Scoring**:  \
   - Exact category stem match: 10 points  \
   - Partial category match: 5 points  \
   - Rating bonus: 0.1-0.5 points (for tie-breaking)\
\
### AI Prediction\
- Combines review title and description for comprehensive analysis  \
- Adapts to vectorizer configuration (handles comma-separated tokens if needed)  \
- Returns probability scores and confidence levels  \
- Processes text in real-time with 300ms debounce\
\
## Important Notes\
1. The model expects comma-separated tokens based on the training configuration  \
2. New reviews are added to the in-memory dataframe (not persistent across restarts)  \
3. The search algorithm supports various forms of keywords and fuzzy matching  \
4. All new reviews get unique IDs and are accessible via /api/review/\{id\}\
\
## API Endpoints\
- `GET /api/items` - Get all items or search results  \
- `GET /api/item/\{id\}` - Get specific item details  \
- `POST /api/predict` - Get AI recommendation for review text  \
- `POST /api/reviews` - Submit new review  \
- `GET /api/review/\{id\}` - Get specific review by ID\
}